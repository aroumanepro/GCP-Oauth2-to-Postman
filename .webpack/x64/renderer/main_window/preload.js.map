{"version":3,"file":"main_window/preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCpBA,eAEA,EAAAQ,cAAcC,kBAAkB,cAAe,CAC7CC,YAAa,IAAM,EAAAC,YAAYC,KAAK,gBACpCC,WAAY,IAAM,EAAAF,YAAYC,KAAK,eACnCE,eAAiBC,GAAiB,EAAAJ,YAAYK,GAAG,gBAAiBD,GAClEE,MAAQF,GAAiB,EAAAJ,YAAYK,GAAG,MAAOD,GAC/CG,iBAAmBC,GAAmB,EAAAR,YAAYS,OAAO,qBAAsBD,GAC/EE,cAAe,IAAM,EAAAV,YAAYS,OAAO,mBACxCE,gBAAiB,IAAM,EAAAX,YAAYS,OAAO,qBAC1CG,iBAAkB,IAAM,EAAAZ,YAAYS,OAAO,sBAC3CI,gBAAiB,IAAM,EAAAb,YAAYS,OAAO,qBAC1CK,wBAAyB,IAAM,EAAAd,YAAYS,OAAO,+BAClDM,0BAA2B,IAAM,EAAAf,YAAYS,OAAO,iCACpDO,2BAA4B,IAAM,EAAAhB,YAAYS,OAAO,mC","sources":["webpack://auth-gcloud-postman/external commonjs2 \"electron\"","webpack://auth-gcloud-postman/webpack/bootstrap","webpack://auth-gcloud-postman/./src/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\nimport { contextBridge, ipcRenderer } from 'electron';\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  startServer: () => ipcRenderer.send('start-server'),\n  stopServer: () => ipcRenderer.send('stop-server'),\n  onServerStatus: (callback:any) => ipcRenderer.on('server-status', callback),\n  onLog: (callback:any) => ipcRenderer.on('log', callback),\n  runGcloudCommand: (command:string) => ipcRenderer.invoke('run-gcloud-command', command),\n  runGcloudAuth: () => ipcRenderer.invoke('run-gcloud-auth'),\n  checkGcloudAuth: () => ipcRenderer.invoke('check-gcloud-auth'),\n  revokeGcloudAuth: () => ipcRenderer.invoke('revoke-gcloud-auth'),\n  getServerStatus: () => ipcRenderer.invoke('get-server-status'),\n  runGcloudAuthDefaultApp: () => ipcRenderer.invoke('run-gcloud-auth-default-app'),\n  checkGcloudAuthDefaultApp: () => ipcRenderer.invoke('check-gcloud-auth-default-app'),\n  revokeGcloudAuthDefaultApp: () => ipcRenderer.invoke('revoke-gcloud-auth-default-app'),\n});"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","contextBridge","exposeInMainWorld","startServer","ipcRenderer","send","stopServer","onServerStatus","callback","on","onLog","runGcloudCommand","command","invoke","runGcloudAuth","checkGcloudAuth","revokeGcloudAuth","getServerStatus","runGcloudAuthDefaultApp","checkGcloudAuthDefaultApp","revokeGcloudAuthDefaultApp"],"sourceRoot":""}